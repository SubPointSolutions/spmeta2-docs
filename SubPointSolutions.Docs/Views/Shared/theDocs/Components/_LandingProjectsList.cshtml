@{

    var tiles = Documents
                .Where(x => x.ContainsKey("Tile")
                    && x.ContainsKey("TileTitle")
                    && x.ContainsKey("TileDescription")
                    && x.ContainsKey("TileOrder")
                    )
         .OrderBy(x => x.String("TileOrder", "0"))
         .ToList();

    if (!tiles.Any())
    {
        return;
    }
}

<div class="container">
    <div class="row">

        @foreach (var tile in tiles)
        {
            var tilePath = System.IO.Path.GetDirectoryName(tile.String("RelativeFilePath"));
            var tileLinks = Documents
                        .Where(x => x.ContainsKey("TileLink")
                              && x.ContainsKey("RelativeFilePath")
                              && x.String("RelativeFilePath").StartsWith(tilePath))
                        .OrderBy(x => x.String("TileLinkOrder", "0"))
                        .ToList();



            <div class="col-md-4">
                <div class="promo left small-icon">
                    <h3>

                        <a href="@(PathHelper.ToRootLink(PathHelper.RemoveExtension(tile.String("RelativeFilePath"))))">
                            @(tile.String("TileTitle"))
                        </a>

                    </h3>
                    <p>
                        @tile.String("TileDescription")
                    </p>
                    @if (tileLinks.Any())
                    {
                        <ul>
                            @foreach (var tileLink in tileLinks)
                            {
                                <li>
                                    <a href="@(PathHelper.ToRootLink(PathHelper.RemoveExtension(tileLink.String("RelativeFilePath"))))">
                                        @(tileLink.String("Title"))
                                    </a>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>

        }
    </div>
</div>