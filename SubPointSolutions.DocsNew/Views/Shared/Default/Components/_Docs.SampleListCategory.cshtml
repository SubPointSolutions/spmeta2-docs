@{
    var categoryTagName = "Category";


    var allSamples = ViewBag.SamplesModel.Samples as List<SubPointSolutions.DocsBuildTools.Data.DocSample>;
    var samplesWithCategories = SConfig.AllSamples;

    var sampleCategories = SubPointSolutions.DocsBuildTools.Data.SampleReadAPI.GetSampleCategories(allSamples);

    var categoryHeight = 80;
    var categoryItemHeight = 18;

    var categoryRowsCount = 4;

    var totalCategoriesHeight = sampleCategories.Count() * categoryHeight;
    var totalLinksHeight = 0;

    foreach (var sampleGroupName in sampleCategories)
    {
        var samples = allSamples.Where(s => s.Tags.First(t => t.Name == categoryTagName).Values.Contains(sampleGroupName));

        totalLinksHeight += samples.Count() * categoryItemHeight;
    }

    var totalHeight = totalCategoriesHeight + totalLinksHeight;
    var rowHeight = totalHeight / categoryRowsCount;

    var currentRowHeight = 0;
}

<h3>@ViewBag.SamplesModel.CategoryName</h3>


    @Html.Raw("<table class='table table-bordered'>")

    @foreach (var sampleGroupName in sampleCategories)
    {
        var samples = samplesWithCategories.Where(s => {

            return s.IsMethod == true 
                        && s.Tags.Any(t => t.Name == categoryTagName)
                        && s.Tags.First(t => t.Name == categoryTagName).Values.Contains(sampleGroupName);
        });

        if (!samples.Any())
        {
            continue;
        }

        <tr>
            <th colspan="2">
                @sampleGroupName
            </th>
        </tr>
                    @foreach (var sample in samples) {
                        <tr>
                            @{
                                currentRowHeight += categoryItemHeight;

                                var definitionClassName = sample.ClassName
                                    .Replace("Tests", string.Empty)
                                    .Replace("Test", string.Empty);

                                var isStandardTag = sample.Tags.FirstOrDefault(t => t.Name == "isStandard");

                                if (isStandardTag == null)
                                {
                                    throw new Exception(string.Format("Cannot find [isStandard] tag for sample:[{1}] in file:[{0}", sample.SourceFileName, sample.MethodName));
                                }

                                var isStandardSample = isStandardTag.Values.Contains(true.ToString());

                                var definitionUrl = "/spmeta2/reference/sp-foundation-definitions/{0}";

                                if (isStandardSample)
                                {
                                    definitionUrl = "/spmeta2/reference/sp-standard-definitions/{0}";
                                }

                                var definitionPageUrl = string.Format(definitionUrl, definitionClassName).ToLower();
                                var isHidden = SubPointSolutions.DocsBuildTools.Data.SampleReadAPI.HasTag(sample, "Hidden");
                                <td>
                                    @if (isHidden)
                                    {
                                        @(sample.Title)
                                    }
                                    else
                                    {
                                        <a href="@(definitionPageUrl + "?#" + SubPointSolutions.DocsBuildTools.Data.SampleReadAPI.GetSafeAnchor(sample.Title))">
                                            @(sample.Title)
                                        </a>
                                    }
                                </td>
                                <td>
                                    @(sample.Description)
                                </td>

                            }
                                </tr>
                    }
    }


    @Html.Raw("</table>")
